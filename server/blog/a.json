{"title":"Node 调试工具入门教程","author":"阮一峰","time":"2018-03-20 08:11:35","content":"\n\n                                    <!-- div class=\"asset-body\" -->\n                                        <p>JavaScript 程序越来越复杂，调试工具的重要性日益凸显。客户端脚本有浏览器，Node 脚本怎么调试呢？</p>\n\n                                    <!-- /div -->\n\n\n                                    <!-- div id=\"more\" class=\"asset-more\" -->\n                                        <p><img src=\"https://ycc-1256164624.cos.ap-beijing.myqcloud.com/ryf_bg2018031901.png?sign=q-sign-algorithm%3Dsha1%26q-ak%3DAKIDlLm23q0hlbCZjhywCE0Wnoa6uUs6oqQs%26q-sign-time%3D1521597948%3B1553133948%26q-key-time%3D1521597948%3B1553133948%26q-header-list%3D%26q-url-param-list%3D%26q-signature%3D8218dd10dbd8011f21d033712b4433a07400788f\" alt=\"\" title=\"\"></p>\n\n<p>2016年，Node 决定将 Chrome 浏览器的&quot;开发者工具&quot;作为官方的调试工具，使得 Node 脚本也可以使用图形界面调试，这大大方便了开发者。</p>\n\n<p>本文介绍如何使用 Node 脚本的调试工具。</p>\n\n<h2>一、示例程序</h2>\n\n<p>为了方便讲解，下面是一个示例脚本。首先，新建一个工作目录，并进入该目录。</p>\n\n<blockquote><pre><code class=\"language-bash\">\n$ mkdir debug-demo\n$ cd debug-demo\n</code></pre></blockquote>\n\n<p>然后，生成<code>package.json</code>文件，并安装 <a href=\"http://www.ruanyifeng.com/blog/2017/08/koa.html\">Koa</a> 框架和 koa-route 模块。</p>\n\n<blockquote><pre><code class=\"language-bash\">\n$ npm init -y\n$ npm install --save koa koa-route\n</code></pre></blockquote>\n\n<p>接着，新建一个脚本<code>app.js</code>，并写入下面的内容。</p>\n\n<blockquote><pre><code class=\"language-javascript\">\n// app.js\nconst Koa = require(&apos;koa&apos;);\nconst router = require(&apos;koa-route&apos;);\n\nconst app = new Koa();\n\nconst main = ctx =&gt; {\n  ctx.response.body = &apos;Hello World&apos;;\n};\n\nconst welcome = (ctx, name) =&gt; {\n  ctx.response.body = &apos;Hello &apos; + name;\n};\n\napp.use(router.get(&apos;/&apos;, main));\napp.use(router.get(&apos;/:name&apos;, welcome));\n\napp.listen(3000);\nconsole.log(&apos;listening on port 3000&apos;);\n</code></pre></blockquote>\n\n<p>上面代码是一个简单的 Web 应用，指定了两个路由，访问后会显示一行欢迎信息。如果想了解代码的详细含义，可以参考 <a href=\"http://www.ruanyifeng.com/blog/2017/08/koa.html\">Koa 教程</a>。</p>\n\n<h2>二、启动开发者工具</h2>\n\n<p>现在，运行上面的脚本。</p>\n\n<blockquote><pre><code class=\"language-bash\">\n$ node --inspect app.js\n</code></pre></blockquote>\n\n<p>上面代码中，<code>--inspect</code>参数是启动调试模式必需的。这时，打开浏览器访问<code>http://127.0.0.1:3000</code>，就可以看到 Hello World 了。</p>\n\n<p><img src=\"https://ycc-1256164624.cos.ap-beijing.myqcloud.com/ryf_bg2018031902.png?sign=q-sign-algorithm%3Dsha1%26q-ak%3DAKIDlLm23q0hlbCZjhywCE0Wnoa6uUs6oqQs%26q-sign-time%3D1521597948%3B1553133948%26q-key-time%3D1521597948%3B1553133948%26q-header-list%3D%26q-url-param-list%3D%26q-signature%3D7d3d1cd93e9abab6b44f65f02e93e411c7aad224\" alt=\"\" title=\"\"></p>\n\n<p>接下来，就要开始调试了。一共有两种打开调试工具的方法，第一种是在 Chrome 浏览器的地址栏，键入 <code>chrome://inspect</code>或者<code>about:inspect</code>，回车后就可以看到下面的界面。</p>\n\n<p><img src=\"https://ycc-1256164624.cos.ap-beijing.myqcloud.com/ryf_bg2018031903.png?sign=q-sign-algorithm%3Dsha1%26q-ak%3DAKIDlLm23q0hlbCZjhywCE0Wnoa6uUs6oqQs%26q-sign-time%3D1521597948%3B1553133948%26q-key-time%3D1521597948%3B1553133948%26q-header-list%3D%26q-url-param-list%3D%26q-signature%3Dc23e17ff103e052b43011d1282a68cd0eea351d3\" alt=\"\" title=\"\"></p>\n\n<p>在 Target 部分，点击 inspect 链接，就能进入调试工具了。</p>\n\n<p>第二种进入调试工具的方法，是在 http://127.0.0.1:3000 的窗口打开&quot;开发者工具&quot;，顶部左上角有一个 Node 的绿色标志，点击就可以进入。</p>\n\n<p><img src=\"https://ycc-1256164624.cos.ap-beijing.myqcloud.com/ryf_bg2018031904.png?sign=q-sign-algorithm%3Dsha1%26q-ak%3DAKIDlLm23q0hlbCZjhywCE0Wnoa6uUs6oqQs%26q-sign-time%3D1521597948%3B1553133948%26q-key-time%3D1521597948%3B1553133948%26q-header-list%3D%26q-url-param-list%3D%26q-signature%3D7f3dfb1612500754c3c702db4a6dcb22916362bc\" alt=\"\" title=\"\"></p>\n\n<h2>三、调试工具窗口</h2>\n\n<p>调试工具其实就是&quot;开发者工具&quot;的定制版，省去了那些对服务器脚本没用的部分。</p>\n\n<p>它主要有四个面板。</p>\n\n<blockquote>\n  <ul>\n<li>Console：控制台</li>\n<li>Memory：内存</li>\n<li>Profiler：性能</li>\n<li>Sources：源码</li>\n</ul>\n</blockquote>\n\n<p><img src=\"https://ycc-1256164624.cos.ap-beijing.myqcloud.com/ryf_bg2018031905.png?sign=q-sign-algorithm%3Dsha1%26q-ak%3DAKIDlLm23q0hlbCZjhywCE0Wnoa6uUs6oqQs%26q-sign-time%3D1521597948%3B1553133948%26q-key-time%3D1521597948%3B1553133948%26q-header-list%3D%26q-url-param-list%3D%26q-signature%3Dd8a7c64f611eb9209a2e1db22118bae7c62b5a75\" alt=\"\" title=\"\"></p>\n\n<p>这些面板的用法，基本上跟浏览器环境差不多，这里只介绍 Sources （源码）面板。</p>\n\n<h2>四、设置断点</h2>\n\n<p>进入 Sources 面板，找到正在运行的脚本<code>app.js</code>。</p>\n\n<p><img src=\"https://ycc-1256164624.cos.ap-beijing.myqcloud.com/ryf_bg2018031906.png?sign=q-sign-algorithm%3Dsha1%26q-ak%3DAKIDlLm23q0hlbCZjhywCE0Wnoa6uUs6oqQs%26q-sign-time%3D1521597948%3B1553133948%26q-key-time%3D1521597948%3B1553133948%26q-header-list%3D%26q-url-param-list%3D%26q-signature%3Db5b2368d243d34bf5220a8d6fff1348039ba5241\" alt=\"\" title=\"\"></p>\n\n<p>在第11行（也就是下面这一行）的行号上点一下，就设置了一个断点。</p>\n\n<blockquote><pre><code class=\"language-javascript\">\nctx.response.body = &apos;Hello &apos; + name;\n</code></pre></blockquote>\n\n<p><img src=\"https://ycc-1256164624.cos.ap-beijing.myqcloud.com/ryf_bg2018031907.png?sign=q-sign-algorithm%3Dsha1%26q-ak%3DAKIDlLm23q0hlbCZjhywCE0Wnoa6uUs6oqQs%26q-sign-time%3D1521597948%3B1553133948%26q-key-time%3D1521597948%3B1553133948%26q-header-list%3D%26q-url-param-list%3D%26q-signature%3D545be6ee1786fec1c5c2fc66f49f75bcf64d8ded\" alt=\"\" title=\"\"></p>\n\n<p>这时，浏览器访问 http://127.0.0.1:3000/alice ，页面会显示正在等待服务器返回。切换到调试工具，可以看到 Node 主线程处于暂停（paused）阶段。</p>\n\n<p><img src=\"https://ycc-1256164624.cos.ap-beijing.myqcloud.com/ryf_bg2018031908.png?sign=q-sign-algorithm%3Dsha1%26q-ak%3DAKIDlLm23q0hlbCZjhywCE0Wnoa6uUs6oqQs%26q-sign-time%3D1521597948%3B1553133948%26q-key-time%3D1521597948%3B1553133948%26q-header-list%3D%26q-url-param-list%3D%26q-signature%3De2610d0552ddb912dcb0ceb8e6a5cc3d0e2f0dbf\" alt=\"\" title=\"\"></p>\n\n<p>进入 Console 面板，输入 name，会返回 alice。这表明我们正处在断点处的上下文（context）。</p>\n\n<p><img src=\"https://ycc-1256164624.cos.ap-beijing.myqcloud.com/ryf_bg2018031909.png?sign=q-sign-algorithm%3Dsha1%26q-ak%3DAKIDlLm23q0hlbCZjhywCE0Wnoa6uUs6oqQs%26q-sign-time%3D1521597948%3B1553133948%26q-key-time%3D1521597948%3B1553133948%26q-header-list%3D%26q-url-param-list%3D%26q-signature%3D1aa88191cd49f472d3b6f96de689d9bcdd3e34a7\" alt=\"\" title=\"\"></p>\n\n<p>再切回 Sources 面板，右侧可以看到 Watch、Call Stack、Scope、Breakpoints 等折叠项。打开 Scope 折叠项，可以看到 Local 作用域和 Global 作用域里面的所有变量。</p>\n\n<p>Local 作用域里面，变量<code>name</code>的值是<code>alice</code>，双击进入编辑状态，把它改成<code>bob</code>。</p>\n\n<p><img src=\"https://ycc-1256164624.cos.ap-beijing.myqcloud.com/ryf_bg2018031910.png?sign=q-sign-algorithm%3Dsha1%26q-ak%3DAKIDlLm23q0hlbCZjhywCE0Wnoa6uUs6oqQs%26q-sign-time%3D1521597948%3B1553133948%26q-key-time%3D1521597948%3B1553133948%26q-header-list%3D%26q-url-param-list%3D%26q-signature%3D60b28dd4cc44ee3d1aedaf01ace2dd29c84456e4\" alt=\"\" title=\"\"></p>\n\n<p>然后，点击顶部工具栏的继续运行按钮。</p>\n\n<p><img src=\"https://ycc-1256164624.cos.ap-beijing.myqcloud.com/ryf_bg2018031911.png?sign=q-sign-algorithm%3Dsha1%26q-ak%3DAKIDlLm23q0hlbCZjhywCE0Wnoa6uUs6oqQs%26q-sign-time%3D1521597948%3B1553133948%26q-key-time%3D1521597948%3B1553133948%26q-header-list%3D%26q-url-param-list%3D%26q-signature%3D7351d59e20518c8c3dd4fad18ae4671beac0d5eb\" alt=\"\" title=\"\"></p>\n\n<p>页面上就可以看到 Hello bob 了。</p>\n\n<p><img src=\"https://ycc-1256164624.cos.ap-beijing.myqcloud.com/ryf_bg2018031912.png?sign=q-sign-algorithm%3Dsha1%26q-ak%3DAKIDlLm23q0hlbCZjhywCE0Wnoa6uUs6oqQs%26q-sign-time%3D1521597948%3B1553133948%26q-key-time%3D1521597948%3B1553133948%26q-header-list%3D%26q-url-param-list%3D%26q-signature%3Dc5bf1b6ee06b2b1f59bfd3ff5259d8a9d433d3ce\" alt=\"\" title=\"\"></p>\n\n<p>命令行下，按下 ctrl + c，终止运行<code>app.js</code>。</p>\n\n<h2>五、调试非服务脚本</h2>\n\n<p>Web 服务脚本会一直在后台运行，但是大部分脚本只是处理某个任务，运行完就会终止。这时，你可能根本没有时间打开调试工具。等你打开了，脚本早就结束运行了。这时怎么调试呢？</p>\n\n<blockquote><pre><code class=\"language-bash\">\n$ node --inspect=9229 -e &quot;setTimeout(function() { console.log(&apos;yes&apos;); }, 30000)&quot;\n</code></pre></blockquote>\n\n<p>上面代码中，<code>--inspect=9229</code>指定调试端口为 9229，这是调试工具默认的通信端口。<code>-e</code>参数指定一个字符串，作为代码运行。</p>\n\n<p>访问<code>chrome://inspect</code>，就可以进入调试工具，调试这段代码了。</p>\n\n<p><img src=\"https://ycc-1256164624.cos.ap-beijing.myqcloud.com/ryf_bg2018031913.png?sign=q-sign-algorithm%3Dsha1%26q-ak%3DAKIDlLm23q0hlbCZjhywCE0Wnoa6uUs6oqQs%26q-sign-time%3D1521597948%3B1553133948%26q-key-time%3D1521597948%3B1553133948%26q-header-list%3D%26q-url-param-list%3D%26q-signature%3Dc6d171a9d407d55397454ba9def0a6e4346157c1\" alt=\"\" title=\"\"></p>\n\n<p>代码放在<code>setTimeout</code>里面，总是不太方便。那些运行时间较短的脚本，可能根本来不及打开调试工具。这时就要使用下面的方法。</p>\n\n<blockquote><pre><code class=\"language-bash\">\n$ node --inspect-brk=9229 app.js\n</code></pre></blockquote>\n\n<p>上面代码中，<code>--inspect-brk</code>指定在第一行就设置断点。也就是说，一开始运行，就是暂停的状态。</p>\n\n<h2>六、忘了写 --inspect 怎么办？</h2>\n\n<p>打开调试工具的前提是，启动 Node 脚本时就加上<code>--inspect</code>参数。如果忘了这个参数，还能不能调试呢？</p>\n\n<p>回答是可以的。首先，正常启动脚本。</p>\n\n<blockquote><pre><code class=\"language-bash\">\n$ node app.js\n</code></pre></blockquote>\n\n<p>然后，在另一个命令行窗口，查找上面脚本的进程号。</p>\n\n<blockquote><pre><code class=\"language-bash\">\n$ ps ax | grep app.js \n\n30464 pts/11   Sl+    0:00 node app.js\n30541 pts/12   S+     0:00 grep app.js\n</code></pre></blockquote>\n\n<p>上面命令中，<code>app.js</code>的进程号是<code>30464</code>。</p>\n\n<p>接着，运行下面的命令。</p>\n\n<blockquote><pre><code class=\"language-bash\">\n$ node -e &apos;process._debugProcess(30464)&apos;\n</code></pre></blockquote>\n\n<p>上面命令会建立进程 30464 与调试工具的连接，然后就可以打开调试工具了。</p>\n\n<p>还有一种方法，就是向脚本进程发送 <a href=\"https://stackoverflow.com/questions/13052548/node-js-how-to-attach-to-a-running-process-and-to-debug-the-server-with-a-conso\">SIGUSR1</a> 信号，也可以建立调试连接。</p>\n\n<blockquote><pre><code class=\"language-bash\">\n$ kill -SIGUSR1 30464\n</code></pre></blockquote>\n\n<h2>七、参考链接</h2>\n\n<ul>\n<li><a href=\"https://medium.com/the-node-js-collection/debugging-node-js-with-google-chrome-4965b5f910f4\">Debugging Node.js with Google Chrome</a>, by Jacopo Daeli</li>\n<li><a href=\"https://medium.com/@paul_irish/debugging-node-js-nightlies-with-chrome-devtools-7c4a1b95ae27\">Debugging Node.js with Chrome DevTools</a>, by Paul Irish</li>\n<li><a href=\"https://remysharp.com/2018/03/03/last-minute-node-debugging\">Last minute node debugging</a>, by Remy Sharp</li>\n</ul>\n\n<p>（完）</p>\n\n                                    <!-- /div -->\n\n                                "}